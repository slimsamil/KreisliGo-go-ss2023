// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: livetickgo/livetickgo.proto

package livetickgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LivetickgoClient is the client API for Livetickgo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LivetickgoClient interface {
	RunGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (Livetickgo_RunGameClient, error)
	SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type livetickgoClient struct {
	cc grpc.ClientConnInterface
}

func NewLivetickgoClient(cc grpc.ClientConnInterface) LivetickgoClient {
	return &livetickgoClient{cc}
}

func (c *livetickgoClient) RunGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (Livetickgo_RunGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Livetickgo_ServiceDesc.Streams[0], "/livetickgo.Livetickgo/runGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &livetickgoRunGameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Livetickgo_RunGameClient interface {
	Recv() (*Game, error)
	grpc.ClientStream
}

type livetickgoRunGameClient struct {
	grpc.ClientStream
}

func (x *livetickgoRunGameClient) Recv() (*Game, error) {
	m := new(Game)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *livetickgoClient) SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/livetickgo.Livetickgo/sendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LivetickgoServer is the server API for Livetickgo service.
// All implementations must embed UnimplementedLivetickgoServer
// for forward compatibility
type LivetickgoServer interface {
	RunGame(*Game, Livetickgo_RunGameServer) error
	SendEvent(context.Context, *Event) (*emptypb.Empty, error)
	mustEmbedUnimplementedLivetickgoServer()
}

// UnimplementedLivetickgoServer must be embedded to have forward compatible implementations.
type UnimplementedLivetickgoServer struct {
}

func (UnimplementedLivetickgoServer) RunGame(*Game, Livetickgo_RunGameServer) error {
	return status.Errorf(codes.Unimplemented, "method RunGame not implemented")
}
func (UnimplementedLivetickgoServer) SendEvent(context.Context, *Event) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedLivetickgoServer) mustEmbedUnimplementedLivetickgoServer() {}

// UnsafeLivetickgoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LivetickgoServer will
// result in compilation errors.
type UnsafeLivetickgoServer interface {
	mustEmbedUnimplementedLivetickgoServer()
}

func RegisterLivetickgoServer(s grpc.ServiceRegistrar, srv LivetickgoServer) {
	s.RegisterService(&Livetickgo_ServiceDesc, srv)
}

func _Livetickgo_RunGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Game)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LivetickgoServer).RunGame(m, &livetickgoRunGameServer{stream})
}

type Livetickgo_RunGameServer interface {
	Send(*Game) error
	grpc.ServerStream
}

type livetickgoRunGameServer struct {
	grpc.ServerStream
}

func (x *livetickgoRunGameServer) Send(m *Game) error {
	return x.ServerStream.SendMsg(m)
}

func _Livetickgo_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivetickgoServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/livetickgo.Livetickgo/sendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivetickgoServer).SendEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// Livetickgo_ServiceDesc is the grpc.ServiceDesc for Livetickgo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Livetickgo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "livetickgo.Livetickgo",
	HandlerType: (*LivetickgoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendEvent",
			Handler:    _Livetickgo_SendEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "runGame",
			Handler:       _Livetickgo_RunGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "livetickgo/livetickgo.proto",
}
